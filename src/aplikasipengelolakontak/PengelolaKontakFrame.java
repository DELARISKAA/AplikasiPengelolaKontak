/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package aplikasipengelolakontak;

import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author user
 */
public class PengelolaKontakFrame extends javax.swing.JFrame {
    private Connection connection;
    private Object dbManager;
    private Object txtNama;

    /**
     * Creates new form PengelolaKontakFrame
     */
    public PengelolaKontakFrame() {
        initComponents();
        try {
            connection = DriverManager.getConnection("jdbc:sqlite:dbManager.db");

            buatTabel(); // Membuat tabel jika belum ada
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtnama = new javax.swing.JTextField();
        txtnohp = new javax.swing.JTextField();
        cbbkategori = new javax.swing.JComboBox<>();
        tambah = new javax.swing.JButton();
        ubah = new javax.swing.JButton();
        hapus = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelkontak = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        carikontak = new javax.swing.JTextField();
        cari = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        ekspor = new javax.swing.JButton();
        impor = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 153, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Aplikasi Pengelola Kontak", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N

        jLabel1.setText("Nama  :");

        jLabel2.setText("No.HP :");

        jLabel3.setText("Kategori :");

        cbbkategori.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Keluarga", "Teman", "Pekerjaan" }));

        tambah.setText("TAMBAH");
        tambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tambahActionPerformed(evt);
            }
        });

        ubah.setText("UBAH");
        ubah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ubahActionPerformed(evt);
            }
        });

        hapus.setText("HAPUS");
        hapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hapusActionPerformed(evt);
            }
        });

        tabelkontak.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nama", "No.HP", "Kategori"
            }
        ));
        tabelkontak.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelkontakMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelkontak);

        jLabel4.setText("Cari Kontak :");

        cari.setText("CARI");
        cari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cariActionPerformed(evt);
            }
        });

        jButton1.setText("KELUAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        ekspor.setText("EKSPOR");
        ekspor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eksporActionPerformed(evt);
            }
        });

        impor.setText("IMPOR");
        impor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imporActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 568, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(155, 155, 155)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(tambah)
                                        .addGap(12, 12, 12)
                                        .addComponent(ubah)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(hapus))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel3)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(cbbkategori, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel2)
                                            .addGap(18, 18, 18)
                                            .addComponent(txtnohp))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel1)
                                            .addGap(18, 18, 18)
                                            .addComponent(txtnama, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(carikontak, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cari)))))
                .addContainerGap(34, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(ekspor)
                .addGap(29, 29, 29)
                .addComponent(impor)
                .addGap(30, 30, 30)
                .addComponent(jButton1)
                .addGap(91, 91, 91))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtnama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtnohp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cbbkategori, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tambah)
                    .addComponent(ubah)
                    .addComponent(hapus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(carikontak, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cari))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(ekspor)
                    .addComponent(impor))
                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tambahActionPerformed
        tambahKontak();
    }//GEN-LAST:event_tambahActionPerformed

    private void hapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hapusActionPerformed
         int selectedRow = tabelkontak.getSelectedRow(); // Ambil baris yang dipilih
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih kontak yang ingin dihapus!");
            return;
        }

        // Ambil ID kontak dari kolom pertama
        int id = (int) tabelkontak.getValueAt(selectedRow, 0);

        // Konfirmasi penghapusan
        int confirm = JOptionPane.showConfirmDialog(this,
                "Apakah Anda yakin ingin menghapus kontak ini?",
                "Konfirmasi Hapus",
                JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            // Hapus kontak dari database
            String sql = "DELETE FROM kontak WHERE id = ?";
            try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
                pstmt.setInt(1, id);
                pstmt.executeUpdate();
                JOptionPane.showMessageDialog(this, "Kontak berhasil dihapus!");

                // Perbarui JTable
                refreshTable();

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Gagal menghapus kontak.");
                e.printStackTrace();
            }}
    }//GEN-LAST:event_hapusActionPerformed

    private void ubahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ubahActionPerformed
       int selectedRow = tabelkontak.getSelectedRow(); // Ambil baris yang dipilih

    // Validasi: Pastikan ada baris yang dipilih
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Pilih kontak yang ingin diubah!");
        return;
    }

    // Ambil ID kontak dari kolom pertama
    int id = (int) tabelkontak.getValueAt(selectedRow, 0);

    // Ambil data baru dari input
    String nama = txtnama.getText();
    String no_hp = txtnohp.getText();
    String kategori = (String) cbbkategori.getSelectedItem();

    // Validasi input
    if (nama == null || nama.isEmpty() || no_hp == null || no_hp.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Nama dan No HP tidak boleh kosong!");
        return;
    }

    // Update data di database
    String sql = "UPDATE kontak SET nama = ?, no_hp = ?, kategori = ? WHERE id = ?";
    try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
        pstmt.setString(1, nama);
        pstmt.setString(2, no_hp);
        pstmt.setString(3, kategori);
        pstmt.setInt(4, id);

        pstmt.executeUpdate(); // Eksekusi query
        JOptionPane.showMessageDialog(this, "Kontak berhasil diperbarui!");

        // Perbarui JTable
        refreshTable();

        // Bersihkan input setelah pengubahan
        txtnama.setText("");
        txtnohp.setText("");
        cbbkategori.setSelectedIndex(0);

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Gagal mengubah kontak.");
        e.printStackTrace();
    }
    }//GEN-LAST:event_ubahActionPerformed

    private void tabelkontakMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelkontakMouseClicked
        tableRowClicked(evt);
    }//GEN-LAST:event_tabelkontakMouseClicked

    private void cariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cariActionPerformed
        String keyword = carikontak.getText();
        
    if (keyword == null || keyword.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Masukkan nama untuk pencarian!");
        return;
    }
    String sql = "SELECT * FROM kontak WHERE nama LIKE ?";
    try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
        pstmt.setString(1, "%" + keyword + "%"); 
        try (ResultSet rs = pstmt.executeQuery()) {
            // Buat model tabel
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("ID");
            model.addColumn("Nama");
            model.addColumn("No HP");
            model.addColumn("Kategori");

            // Tambahkan hasil pencarian ke model
            while (rs.next()) {
                Object[] row = {
                    rs.getInt("id"),
                    rs.getString("nama"),
                    rs.getString("no_hp"),
                    rs.getString("kategori")
                };
                model.addRow(row);
            }

            // Perbarui JTable
            tabelkontak.setModel(model);

        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Gagal melakukan pencarian.");
        e.printStackTrace();
    }
    }//GEN-LAST:event_cariActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int pilihan = JOptionPane.showConfirmDialog(
            null,
            "Apakah Anda yakin ingin keluar?",
            "Konfirmasi Keluar",
            JOptionPane.YES_NO_CANCEL_OPTION,
            JOptionPane.QUESTION_MESSAGE
        );

        if (pilihan == JOptionPane.YES_OPTION) {
            System.exit(0);  // Keluar dari aplikasi jika pengguna memilih "Ya"
        } else if (pilihan == JOptionPane.NO_OPTION) {
            // Tetap di aplikasi jika pengguna memilih "Tidak"
        } else if (pilihan == JOptionPane.CANCEL_OPTION) {
            // Tetap di aplikasi jika pengguna memilih "Batal"
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void eksporActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eksporActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Simpan File CSV");
        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
        String filePath = fileChooser.getSelectedFile().getAbsolutePath() + ".csv";
            try {
                eksporKontakKeCSV(filePath);
            } catch (IOException ex) {
                Logger.getLogger(PengelolaKontakFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    }//GEN-LAST:event_eksporActionPerformed

    private void imporActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imporActionPerformed
       JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Pilih File CSV");
        int userSelection = fileChooser.showOpenDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
        String filePath = fileChooser.getSelectedFile().getAbsolutePath();
           try {
               imporKontakDariCSV(filePath);
           } catch (IOException ex) {
               Logger.getLogger(PengelolaKontakFrame.class.getName()).log(Level.SEVERE, null, ex);
           }

        // Perbarui tabel setelah impor
        refreshTable();
    }
    }//GEN-LAST:event_imporActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PengelolaKontakFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PengelolaKontakFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PengelolaKontakFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PengelolaKontakFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PengelolaKontakFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cari;
    private javax.swing.JTextField carikontak;
    private javax.swing.JComboBox<String> cbbkategori;
    private javax.swing.JButton ekspor;
    private javax.swing.JButton hapus;
    private javax.swing.JButton impor;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabelkontak;
    private javax.swing.JButton tambah;
    private javax.swing.JTextField txtnama;
    private javax.swing.JTextField txtnohp;
    private javax.swing.JButton ubah;
    // End of variables declaration//GEN-END:variables

    private void buatTabel() {
        String sql = "CREATE TABLE IF NOT EXISTS kontak (" +
                     "id INTEGER PRIMARY KEY AUTOINCREMENT, " +
                     "nama TEXT NOT NULL, " +
                     "no_hp TEXT NOT NULL, " +
                     "kategori TEXT NOT NULL)";
        try (Statement stmt = connection.createStatement()) {
            stmt.execute(sql); // Menjalankan perintah SQL untuk membuat tabel
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void tambahKontak() {
    String sql = "INSERT INTO kontak (nama, no_hp, kategori) VALUES (?, ?, ?)";
    try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
        String nama = txtnama.getText();
        String no_hp = txtnohp.getText();
        String kategori = (String) cbbkategori.getSelectedItem();

        if (nama == null || nama.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nama tidak boleh kosong!", "Validasi Gagal", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (no_hp == null || no_hp.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nomor telepon tidak boleh kosong!", "Validasi Gagal", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!no_hp.matches("\\d+")) {
            JOptionPane.showMessageDialog(this, "Nomor telepon hanya boleh berisi angka!", "Validasi Gagal", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (no_hp.length() < 10 || no_hp.length() > 13) {
            JOptionPane.showMessageDialog(this, "Nomor telepon harus memiliki panjang antara 10 hingga 13 digit!", "Validasi Gagal", JOptionPane.ERROR_MESSAGE);
            return;
        }

        pstmt.setString(1, nama);
        pstmt.setString(2, no_hp);
        pstmt.setString(3, kategori);
        pstmt.executeUpdate();
        System.out.println("Kontak berhasil ditambahkan!");
        
        refreshTable();

        txtnama.setText("");
        txtnohp.setText("");
        cbbkategori.setSelectedIndex(0);
    } catch (SQLException e) {
        System.out.println("Gagal menambahkan kontak.");
        e.printStackTrace();
    }

}

    private void refreshTable() {
    String sql = "SELECT * FROM kontak";
    try (PreparedStatement pstmt = connection.prepareStatement(sql);
         ResultSet rs = pstmt.executeQuery()) {

        // Buat model tabel
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("ID");
        model.addColumn("Nama");
        model.addColumn("No HP");
        model.addColumn("Kategori");

        // Tambahkan data ke model
        while (rs.next()) {
            Object[] row = {
                rs.getInt("id"),         // Kolom ID
                rs.getString("nama"),    // Kolom Nama
                rs.getString("no_hp"),   // Kolom No HP
                rs.getString("kategori") // Kolom Kategori
            };
            model.addRow(row);
        }

        // Tampilkan model di JTable
        tabelkontak.setModel(model);

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Gagal mengambil data kontak.");
        e.printStackTrace();
    }
}

    private void tableRowClicked(MouseEvent evt) {
        int selectedRow = tabelkontak.getSelectedRow(); // Ambil indeks baris yang diklik

        if (selectedRow != -1) { // Pastikan ada baris yang dipilih
        // Ambil data dari JTable berdasarkan kolom
        String nama = (String) tabelkontak.getValueAt(selectedRow, 1); // Kolom Nama
        String no_hp = (String) tabelkontak.getValueAt(selectedRow, 2); // Kolom No HP
        String kategori = (String) tabelkontak.getValueAt(selectedRow, 3); // Kolom Kategori

        // Tampilkan data ke input
        txtnama.setText(nama);
        txtnohp.setText(no_hp);
        cbbkategori.setSelectedItem(kategori); // Pilih kategori yang sesuai
    }
    }

    private void eksporKontakKeCSV(String filePath) throws IOException {
        String sql = "SELECT * FROM kontak"; // Query untuk mengambil semua data
        try (PreparedStatement pstmt = connection.prepareStatement(sql);
        ResultSet rs = pstmt.executeQuery();
                
        FileWriter writer = new FileWriter(filePath)) {
        writer.append("ID,Nama,No HP,Kategori\n");
        
        while (rs.next()) {
            writer.append(rs.getInt("id") + ",");
            writer.append(rs.getString("nama") + ",");
            writer.append(rs.getString("no_hp") + ",");
            writer.append(rs.getString("kategori") + "\n");
        }

        writer.flush();
        JOptionPane.showMessageDialog(null, "Data berhasil diekspor ke file CSV!");

    } catch (SQLException | IOException e) {
        JOptionPane.showMessageDialog(null, "Gagal mengekspor data ke CSV: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
    }

    private void imporKontakDariCSV(String filePath) throws FileNotFoundException, IOException {
    }
}
